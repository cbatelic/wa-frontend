{"remainingRequest":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegridItems.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-mdbootstrap\\src\\components\\BsGrid\\BsTreegridItems.vue","mtime":1609323834000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BsTreegridItems.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <tbody>\r\n    <tr\r\n      v-for=\"(item, index) in visibleItems\"\r\n      :key=\"'row-' + index\"\r\n      :class=\"_rowClasses(index)\"\r\n      role=\"row\">\r\n      <slot v-bind=\"{ index: index, item: item.data, level: item.depth, node: item }\">\r\n        <template v-for=\"(column, colIdx) in columns\">\r\n          <component\r\n            :is=\"_componentName(colIdx)\"\r\n            :column=\"column\"\r\n            :index=\"colIdx\"\r\n            :item=\"item.data\"\r\n            :node=\"item\"\r\n            :key=\"column.field + '-' + _uuid()\" />\r\n        </template>\r\n      </slot>\r\n    </tr>\r\n  </tbody>\r\n</template>\r\n\r\n<script>\r\n/**\r\n * TreeNode data type.\r\n *\r\n * @typedef {Object} ITreeNode\r\n * @property {BsModel|Object} data The Node's data model\r\n * @property {number} depth        The Node's depth level in the TreeList\r\n * @property {number} index        The Node's absolute index position in the ArrayList\r\n * @property {ITreeNode} parent    The parent of this Node\r\n * @property {boolean} leaf        The Node's flag, describe it is the last child in the TreeList or not\r\n * @property {boolean} expanded    The Node's state, expanded or collapsed\r\n */\r\nimport BsTreeStore from \"../../model/BsTreeStore\";\r\nimport BsTreegridCell from \"./BsTreegridCell\";\r\nimport BsGridCell from \"./BsGridCell\";\r\nimport Common from \"../../mixins/Common\";\r\nimport Helper from \"../../utils/Helper\";\r\n\r\nexport default {\r\n    name: \"BsTreegridItems\",\r\n    components: {BsTreegridCell, BsGridCell},\r\n    mixins: [Common],\r\n    inject: ['TreeGrid'],\r\n    props: {\r\n        columns: {\r\n            type: Array,\r\n            default: undefined\r\n        },\r\n        items: {\r\n            type: Array,\r\n            default: undefined\r\n        }\r\n    },\r\n    data: () => ({\r\n        childrenFieldmap: '',\r\n        treeNodes: []\r\n    }),\r\n    computed: {\r\n        visibleItems() {\r\n            return this.treeNodes.filter(node => {\r\n                return node.depth === 0 || node.expanded || node.parent.expanded;\r\n            });\r\n        }\r\n    },\r\n    created() {\r\n        this.treeNodes = [];\r\n        this.childrenFieldmap = this.TreeGrid.childrenFieldmap;\r\n    },\r\n    beforeDestroy() {\r\n        this.treeNodes = null;\r\n    },\r\n    methods: {\r\n        /**\r\n         * Get component's name at the given index.\r\n         *\r\n         * @param {int} columnIndex Column index position\r\n         * @returns {string} The component's name\r\n         * @private\r\n         */\r\n        _componentName(columnIndex) {\r\n            return columnIndex === 0 ? 'bs-treegrid-cell' : 'bs-grid-cell';\r\n        },\r\n        /**\r\n         * Get row css class at the given index.\r\n         *\r\n         * @param {int} index Absolute index position\r\n         * @returns {string[]} Css classes\r\n         * @private\r\n         */\r\n        _rowClasses(index) {\r\n            return [\r\n                index % 2 === 0 ? 'md-grid-row' : 'md-grid-row-alt',\r\n            ]\r\n        },\r\n        /**\r\n         * Append childnodes to the treeitems.\r\n         *\r\n         * @param {ITreeNode} parentNode     Parent node\r\n         * @param {BsModel[]|Object[]} datas Collection of data model\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _appendChild(parentNode, datas) {\r\n            let tmpNodes = [];\r\n\r\n            for (let i = 0; i < this.treeNodes.length; i++) {\r\n                const node = this.treeNodes[i];\r\n                tmpNodes.push(node);\r\n\r\n                if (node === parentNode) {\r\n                    let rowIndex = i + 1;\r\n                    for (const data of datas) {\r\n                        const childNode = this._createNode(data, parentNode, (parentNode.depth + 1), rowIndex, false);\r\n                        tmpNodes.push(childNode);\r\n                        rowIndex++;\r\n                    }\r\n                }\r\n                node.index = i;\r\n            }\r\n\r\n            this.treeNodes = tmpNodes;\r\n        },\r\n        /**\r\n         * Create ITreeNode from the given data model.\r\n         *\r\n         * @param {BsModel|Object} data   Data model\r\n         * @param {ITreeNode} parentNode  Parent node\r\n         * @param {int} depth             Node depth level within the TreeList\r\n         * @param {int} index             Absolute node index position within the TreeList\r\n         * @param {boolean} expanded      The node state\r\n         * @returns {ITreeNode} The treeNode\r\n         * @private\r\n         */\r\n        _createNode(data, parentNode, depth, index, expanded) {\r\n            return {\r\n                data: data,\r\n                depth: depth,\r\n                index: index,\r\n                parent: parentNode,\r\n                leaf: this.hasChildren(data) === false,\r\n                expanded: expanded\r\n            }\r\n        },\r\n        /**\r\n         * Iterate childnodes and put them to the given collection.\r\n         *\r\n         * @param {ITreeNode} parentNode   Parent node whos child will be iterated\r\n         * @param {ITreeNode[]} collection An array collection to store the childnodes\r\n         * @returns {void}\r\n         * @private\r\n         */\r\n        _iterateChildNode(parentNode, collection) {\r\n            for (let i = parentNode.index; i < this.treeNodes.length; i++) {\r\n                const node = this.treeNodes[i];\r\n                if (node.parent === parentNode) {\r\n                    collection.push(node);\r\n                    if (this.hasChildren(node.data)) {\r\n                        this._iterateChildNode(node, collection);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Collapse the given node and fires event <b>collapsed</b>.\r\n         *\r\n         * @param {ITreeNode} node The node to collapse\r\n         * @returns {void}\r\n         */\r\n        collapse(node) {\r\n            let collapsedNodes = [];\r\n\r\n            collapsedNodes.push(node);\r\n            if (this.hasChildren(node.data)) {\r\n                this._iterateChildNode(node, collapsedNodes);\r\n            }\r\n            for (const item of collapsedNodes) {\r\n                item.expanded = false;\r\n            }\r\n\r\n            this.TreeGrid.fireEvent('collapsed', node);\r\n        },\r\n        /**\r\n         * Expand the given node and fires event <b>expanded</b>.\r\n         *\r\n         * @param {ITreeNode} node The node to expand\r\n         * @returns {void}\r\n         */\r\n        expand(node) {\r\n            const children = this.getChildren(node.data);\r\n            const adapter = this.TreeGrid.dataSource;\r\n\r\n            if (this.hasChildren(node.data) && Helper.isEmpty(children) && (adapter instanceof BsTreeStore)) {\r\n                adapter.loadChildren(node.data).then(response => {\r\n                    const responseData = response.data;\r\n\r\n                    // Dirty check, populate nodes if condition has been met\r\n                    if (responseData.hasOwnProperty(adapter._config.dataProperty) && responseData.data.length > 0) {\r\n                        this._appendChild(node, this.getChildren(node.data));\r\n                    }\r\n                }).catch(error => {\r\n                    this.TreeGrid.fireEvent('error', error);\r\n                });\r\n            } else if (Helper.isEmpty(children)) {\r\n                node.leaf = true;\r\n            }\r\n\r\n            if (node.leaf === false) {\r\n                node.expanded = true;\r\n                this.TreeGrid.fireEvent('expanded', node);\r\n            }\r\n        },\r\n        /**\r\n         * Get children of the given data model.\r\n         *\r\n         * @param {BsModel|Object} item Data model\r\n         * @returns {BsModel[]|Object[]} The child items\r\n         */\r\n        getChildren(item) {\r\n            return item[this.childrenFieldmap];\r\n        },\r\n        /**\r\n         * Check if the given data model has one or more child or not.\r\n         *\r\n         * @param {Object} item Data model to check\r\n         * @returns {boolean} TRUE if the given model has child otherwise FALSE\r\n         */\r\n        hasChildren(item) {\r\n            const children = this.getChildren(item);\r\n\r\n            return item.hasChildren === true || item.leaf === false || (Helper.isArray(children) && children.length > 0);\r\n        },\r\n        /**\r\n         * Populate and create list of nodes from the given data sources.\r\n         *\r\n         * @param {int} depth                   Node depth level\r\n         * @param {BsModel[]|Object[]} sources  Collection of data model\r\n         * @param {ITreeNode|*} parentNode      Parent node\r\n         * @returns {void}\r\n         */\r\n        populateNodes(depth, sources, parentNode = null) {\r\n            const expandDepth = this.TreeGrid.expandDepth;\r\n            const expanded = this.TreeGrid.expanded;\r\n            let rowIndex = this.treeNodes.length;\r\n\r\n            for (const source of sources) {\r\n                const node = this._createNode(\r\n                    source, parentNode, depth, rowIndex,\r\n                    (source.expanded === true ? true : (expandDepth > depth ? true : expanded))\r\n                );\r\n\r\n                rowIndex = this.treeNodes.push(node);\r\n                if (this.hasChildren(source)) {\r\n                    this.populateNodes(depth + 1, this.getChildren(source), node);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"node_modules/vue-mdbootstrap/src/components/BsGrid"}]}