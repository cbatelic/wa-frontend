{"remainingRequest":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\src\\components\\navigation.vue?vue&type=template&id=09d1a3b8&","dependencies":[{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\src\\components\\navigation.vue","mtime":1644353533481},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chiara\\Desktop\\WA-Projekt\\wa-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXggZmxleC1uby13cmFwIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidy02NCBhYnNvbHV0ZSBzbTpyZWxhdGl2ZSBiZy1ncmF5LTgwMCBzaGFkb3cgbWQ6aC1mdWxsIGZsZXgtY29sIGp1c3RpZnktYmV0d2VlbiBoaWRkZW4gc206ZmxleCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWluLWhlaWdodCI6ICI3MTZweCIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJweC04IiB9LCBbCiAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm10LTEyIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS0zMDAgY3Vyc29yLXBvaW50ZXIgaXRlbXMtY2VudGVyIG1iLTYiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4IGl0ZW1zLWNlbnRlciBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctd2hpdGUiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uIGljb24tdGFibGVyIGljb24tdGFibGVyLWdyaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAyNCAyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLXdpZHRoIjogIjEuNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lY2FwIjogInJvdW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWpvaW4iOiAicm91bmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdHJva2U6ICJub25lIiwgZDogIk0wIDBoMjR2MjRIMHoiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicmVjdCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogIjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyZWN0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogIjE0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogIjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyZWN0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogIjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAiMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyZWN0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogIjE0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogIjE0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ4OiAiMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRGFzaGJvYXJkIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgInB5LTEgcHgtMyBiZy1ncmF5LTYwMCByb3VuZGVkIHRleHQtZ3JheS0zMDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC14cyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjUiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS00MDAgaG92ZXI6dGV4dC1ncmF5LTMwMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgbWItNiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItcHV6emxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMjQgMjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS13aWR0aCI6ICIxLjUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAiY3VycmVudENvbG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICJub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWNhcCI6ICJyb3VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVqb2luIjogInJvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3Ryb2tlOiAibm9uZSIsIGQ6ICJNMCAwaDI0djI0SDB6IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNNCA3aDNhMSAxIDAgMCAwIDEgLTF2LTFhMiAyIDAgMCAxIDQgMHYxYTEgMSAwIDAgMCAxIDFoM2ExIDEgMCAwIDEgMSAxdjNhMSAxIDAgMCAwIDEgMWgxYTIgMiAwIDAgMSAwIDRoLTFhMSAxIDAgMCAwIC0xIDF2M2ExIDEgMCAwIDEgLTEgMWgtM2ExIDEgMCAwIDEgLTEgLTF2LTFhMiAyIDAgMCAwIC00IDB2MWExIDEgMCAwIDEgLTEgMWgtM2ExIDEgMCAwIDEgLTEgLTF2LTNhMSAxIDAgMCAxIDEgLTFoMWEyIDIgMCAwIDAgMCAtNGgtMWExIDEgMCAwIDEgLTEgLTF2LTNhMSAxIDAgMCAxIDEgLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc20gbWwtMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2R1Y3RzIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgInB5LTEgcHgtMyBiZy1ncmF5LTYwMCByb3VuZGVkIHRleHQtZ3JheS0zMDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC14cyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjgiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS00MDAgaG92ZXI6dGV4dC1ncmF5LTMwMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgbWItNiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItY29tcGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDI0IDI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2Utd2lkdGgiOiAiMS41IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogImN1cnJlbnRDb2xvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAibm9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVjYXAiOiAicm91bmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lam9pbiI6ICJyb3VuZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHN0cm9rZTogIm5vbmUiLCBkOiAiTTAgMGgyNHYyNEgweiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwb2x5bGluZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBvaW50czogIjggMTYgMTAgMTAgMTYgOCAxNCAxNCA4IDE2IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImNpcmNsZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGN4OiAiMTIiLCBjeTogIjEyIiwgcjogIjkiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUGVyZm9ybWFuY2UiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImZsZXggdy1mdWxsIGp1c3RpZnktYmV0d2VlbiB0ZXh0LWdyYXktNDAwIGhvdmVyOnRleHQtZ3JheS0zMDAgY3Vyc29yLXBvaW50ZXIgaXRlbXMtY2VudGVyIG1iLTYiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4IGl0ZW1zLWNlbnRlciBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctd2hpdGUiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uIGljb24tdGFibGVyIGljb24tdGFibGVyLWNvZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAyNCAyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLXdpZHRoIjogIjEuNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lY2FwIjogInJvdW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWpvaW4iOiAicm91bmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdHJva2U6ICJub25lIiwgZDogIk0wIDBoMjR2MjRIMHoiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicG9seWxpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwb2ludHM6ICI3IDggMyAxMiA3IDE2IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcG9pbnRzOiAiMTcgOCAyMSAxMiAxNyAxNiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgeDE6ICIxNCIsIHkxOiAiNCIsIHgyOiAiMTAiLCB5MjogIjIwIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc20gbWwtMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRlbGl2ZXJhYmxlcyIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS00MDAgaG92ZXI6dGV4dC1ncmF5LTMwMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgbWItNiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItcHV6emxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMjQgMjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS13aWR0aCI6ICIxLjUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAiY3VycmVudENvbG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICJub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWNhcCI6ICJyb3VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVqb2luIjogInJvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3Ryb2tlOiAibm9uZSIsIGQ6ICJNMCAwaDI0djI0SDB6IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNNCA3aDNhMSAxIDAgMCAwIDEgLTF2LTFhMiAyIDAgMCAxIDQgMHYxYTEgMSAwIDAgMCAxIDFoM2ExIDEgMCAwIDEgMSAxdjNhMSAxIDAgMCAwIDEgMWgxYTIgMiAwIDAgMSAwIDRoLTFhMSAxIDAgMCAwIC0xIDF2M2ExIDEgMCAwIDEgLTEgMWgtM2ExIDEgMCAwIDEgLTEgLTF2LTFhMiAyIDAgMCAwIC00IDB2MWExIDEgMCAwIDEgLTEgMWgtM2ExIDEgMCAwIDEgLTEgLTF2LTNhMSAxIDAgMCAxIDEgLTFoMWEyIDIgMCAwIDAgMCAtNGgtMWExIDEgMCAwIDEgLTEgLTF2LTNhMSAxIDAgMCAxIDEgLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc20gbWwtMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkludm9pY2VzIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgInB5LTEgcHgtMyBiZy1ncmF5LTYwMCByb3VuZGVkIHRleHQtZ3JheS0zMDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC14cyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjI1IildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImZsZXggdy1mdWxsIGp1c3RpZnktYmV0d2VlbiB0ZXh0LWdyYXktNDAwIGhvdmVyOnRleHQtZ3JheS0zMDAgY3Vyc29yLXBvaW50ZXIgaXRlbXMtY2VudGVyIG1iLTYiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJmbGV4IGl0ZW1zLWNlbnRlciBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctd2hpdGUiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uIGljb24tdGFibGVyIGljb24tdGFibGVyLXN0YWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMjQgMjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS13aWR0aCI6ICIxLjUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAiY3VycmVudENvbG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICJub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWNhcCI6ICJyb3VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVqb2luIjogInJvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3Ryb2tlOiAibm9uZSIsIGQ6ICJNMCAwaDI0djI0SDB6IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcG9pbnRzOiAiMTIgNCA0IDggMTIgMTIgMjAgOCAxMiA0IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcG9pbnRzOiAiNCAxMiAxMiAxNiAyMCAxMiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwb2x5bGluZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBvaW50czogIjQgMTYgMTIgMjAgMjAgMTYiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiSW52ZW50b3J5IikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICJmbGV4IHctZnVsbCBqdXN0aWZ5LWJldHdlZW4gdGV4dC1ncmF5LTQwMCBob3Zlcjp0ZXh0LWdyYXktMzAwIGN1cnNvci1wb2ludGVyIGl0ZW1zLWNlbnRlciIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItc2V0dGluZ3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAyNCAyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLXdpZHRoIjogIjEuNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lY2FwIjogInJvdW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWpvaW4iOiAicm91bmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdHJva2U6ICJub25lIiwgZDogIk0wIDBoMjR2MjRIMHoiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk0xMC4zMjUgNC4zMTdjLjQyNi0xLjc1NiAyLjkyNC0xLjc1NiAzLjM1IDBhMS43MjQgMS43MjQgMCAwIDAgMi41NzMgMS4wNjZjMS41NDMtLjk0IDMuMzEuODI2IDIuMzcgMi4zN2ExLjcyNCAxLjcyNCAwIDAgMCAxLjA2NSAyLjU3MmMxLjc1Ni40MjYgMS43NTYgMi45MjQgMCAzLjM1YTEuNzI0IDEuNzI0IDAgMCAwIC0xLjA2NiAyLjU3M2MuOTQgMS41NDMtLjgyNiAzLjMxLTIuMzcgMi4zN2ExLjcyNCAxLjcyNCAwIDAgMCAtMi41NzIgMS4wNjVjLS40MjYgMS43NTYtMi45MjQgMS43NTYtMy4zNSAwYTEuNzI0IDEuNzI0IDAgMCAwIC0yLjU3MyAtMS4wNjZjLTEuNTQzLjk0LTMuMzEtLjgyNi0yLjM3LTIuMzdhMS43MjQgMS43MjQgMCAwIDAgLTEuMDY1IC0yLjU3MmMtMS43NTYtLjQyNi0xLjc1Ni0yLjkyNCAwLTMuMzVhMS43MjQgMS43MjQgMCAwIDAgMS4wNjYgLTIuNTczYy0uOTQtMS41NDMuODI2LTMuMzEgMi4zNy0yLjM3Ljk5Ni42MDggMi4yOTYuMDcgMi41NzItMS4wNjV6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJjaXJjbGUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjeDogIjEyIiwgY3k6ICIxMiIsIHI6ICIzIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtc20gbWwtMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNldHRpbmdzIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl9tKDEpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fbSgyKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJ3LTY0IHotNDAgYWJzb2x1dGUgYmctZ3JheS04MDAgc2hhZG93IG1kOmgtZnVsbCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4gc206aGlkZGVuIHRyYW5zaXRpb24gZHVyYXRpb24tMTUwIGVhc2UtaW4tb3V0IiwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAibW9iaWxlLW5hdiIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJweC04IiB9LCBbCiAgICAgICAgICAgIF92bS5fbSg1KSwKICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm10LTEyIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS0zMDAgaG92ZXI6dGV4dC1ncmF5LTUwMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgbWItNiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItZ3JpZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDI0IDI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2Utd2lkdGgiOiAiMS41IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogImN1cnJlbnRDb2xvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAibm9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVjYXAiOiAicm91bmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lam9pbiI6ICJyb3VuZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHN0cm9rZTogIm5vbmUiLCBkOiAiTTAgMGgyNHYyNEgweiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyZWN0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogIjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAiNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByeDogIjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJlY3QiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAiMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAiNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByeDogIjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJlY3QiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAiNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6ICIxNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByeDogIjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJlY3QiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAiMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAiMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtIG1sLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJEYXNoYm9hcmQiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAicHktMSBweC0zIGJnLWdyYXktNjAwIHJvdW5kZWQgdGV4dC1ncmF5LTMwMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB0ZXh0LXhzIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiNSIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICJmbGV4IHctZnVsbCBqdXN0aWZ5LWJldHdlZW4gdGV4dC1ncmF5LTQwMCBob3Zlcjp0ZXh0LWdyYXktMzAwIGN1cnNvci1wb2ludGVyIGl0ZW1zLWNlbnRlciBtYi02IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiZmxleCBpdGVtcy1jZW50ZXIgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLXdoaXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJqYXZhc2NyaXB0OnZvaWQoMCkiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiBpY29uLXRhYmxlciBpY29uLXRhYmxlci1wdXp6bGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAyNCAyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLXdpZHRoIjogIjEuNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lY2FwIjogInJvdW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWpvaW4iOiAicm91bmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdHJva2U6ICJub25lIiwgZDogIk0wIDBoMjR2MjRIMHoiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk00IDdoM2ExIDEgMCAwIDAgMSAtMXYtMWEyIDIgMCAwIDEgNCAwdjFhMSAxIDAgMCAwIDEgMWgzYTEgMSAwIDAgMSAxIDF2M2ExIDEgMCAwIDAgMSAxaDFhMiAyIDAgMCAxIDAgNGgtMWExIDEgMCAwIDAgLTEgMXYzYTEgMSAwIDAgMSAtMSAxaC0zYTEgMSAwIDAgMSAtMSAtMXYtMWEyIDIgMCAwIDAgLTQgMHYxYTEgMSAwIDAgMSAtMSAxaC0zYTEgMSAwIDAgMSAtMSAtMXYtM2ExIDEgMCAwIDEgMSAtMWgxYTIgMiAwIDAgMCAwIC00aC0xYTEgMSAwIDAgMSAtMSAtMXYtM2ExIDEgMCAwIDEgMSAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvZHVjdHMiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAicHktMSBweC0zIGJnLWdyYXktNjAwIHJvdW5kZWQgdGV4dC1ncmF5LTMwMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB0ZXh0LXhzIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiOCIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICJmbGV4IHctZnVsbCBqdXN0aWZ5LWJldHdlZW4gdGV4dC1ncmF5LTQwMCBob3Zlcjp0ZXh0LWdyYXktMzAwIGN1cnNvci1wb2ludGVyIGl0ZW1zLWNlbnRlciBtYi02IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiZmxleCBpdGVtcy1jZW50ZXIgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLXdoaXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJqYXZhc2NyaXB0OnZvaWQoMCkiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiBpY29uLXRhYmxlciBpY29uLXRhYmxlci1jb21wYXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMjQgMjQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS13aWR0aCI6ICIxLjUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAiY3VycmVudENvbG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICJub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWNhcCI6ICJyb3VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVqb2luIjogInJvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3Ryb2tlOiAibm9uZSIsIGQ6ICJNMCAwaDI0djI0SDB6IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcG9pbnRzOiAiOCAxNiAxMCAxMCAxNiA4IDE0IDE0IDggMTYiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiY2lyY2xlIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY3g6ICIxMiIsIGN5OiAiMTIiLCByOiAiOSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtIG1sLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQZXJmb3JtYW5jZSIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS00MDAgaG92ZXI6dGV4dC1ncmF5LTMwMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgbWItNiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItY29kZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDI0IDI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2Utd2lkdGgiOiAiMS41IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogImN1cnJlbnRDb2xvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAibm9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVjYXAiOiAicm91bmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lam9pbiI6ICJyb3VuZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHN0cm9rZTogIm5vbmUiLCBkOiAiTTAgMGgyNHYyNEgweiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwb2x5bGluZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBvaW50czogIjcgOCAzIDEyIDcgMTYiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicG9seWxpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwb2ludHM6ICIxNyA4IDIxIDEyIDE3IDE2IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB4MTogIjE0IiwgeTE6ICI0IiwgeDI6ICIxMCIsIHkyOiAiMjAiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRGVsaXZlcmFibGVzIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICJmbGV4IHctZnVsbCBqdXN0aWZ5LWJldHdlZW4gdGV4dC1ncmF5LTQwMCBob3Zlcjp0ZXh0LWdyYXktMzAwIGN1cnNvci1wb2ludGVyIGl0ZW1zLWNlbnRlciBtYi02IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiZmxleCBpdGVtcy1jZW50ZXIgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLXdoaXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJqYXZhc2NyaXB0OnZvaWQoMCkiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiBpY29uLXRhYmxlciBpY29uLXRhYmxlci1wdXp6bGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAyNCAyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLXdpZHRoIjogIjEuNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lY2FwIjogInJvdW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWpvaW4iOiAicm91bmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdHJva2U6ICJub25lIiwgZDogIk0wIDBoMjR2MjRIMHoiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk00IDdoM2ExIDEgMCAwIDAgMSAtMXYtMWEyIDIgMCAwIDEgNCAwdjFhMSAxIDAgMCAwIDEgMWgzYTEgMSAwIDAgMSAxIDF2M2ExIDEgMCAwIDAgMSAxaDFhMiAyIDAgMCAxIDAgNGgtMWExIDEgMCAwIDAgLTEgMXYzYTEgMSAwIDAgMSAtMSAxaC0zYTEgMSAwIDAgMSAtMSAtMXYtMWEyIDIgMCAwIDAgLTQgMHYxYTEgMSAwIDAgMSAtMSAxaC0zYTEgMSAwIDAgMSAtMSAtMXYtM2ExIDEgMCAwIDEgMSAtMWgxYTIgMiAwIDAgMCAwIC00aC0xYTEgMSAwIDAgMSAtMSAtMXYtM2ExIDEgMCAwIDEgMSAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiSW52b2ljZXMiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAicHktMSBweC0zIGJnLWdyYXktNjAwIHJvdW5kZWQgdGV4dC1ncmF5LTMwMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB0ZXh0LXhzIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiMjUiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIHRleHQtZ3JheS00MDAgaG92ZXI6dGV4dC1ncmF5LTMwMCBjdXJzb3ItcG9pbnRlciBpdGVtcy1jZW50ZXIgbWItNiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXggaXRlbXMtY2VudGVyIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItc3RhY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAyNCAyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLXdpZHRoIjogIjEuNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lY2FwIjogInJvdW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtbGluZWpvaW4iOiAicm91bmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdHJva2U6ICJub25lIiwgZDogIk0wIDBoMjR2MjRIMHoiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicG9seWxpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwb2ludHM6ICIxMiA0IDQgOCAxMiAxMiAyMCA4IDEyIDQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicG9seWxpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwb2ludHM6ICI0IDEyIDEyIDE2IDIwIDEyIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcG9pbnRzOiAiNCAxNiAxMiAyMCAyMCAxNiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXNtIG1sLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJbnZlbnRvcnkiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImZsZXggdy1mdWxsIGp1c3RpZnktYmV0d2VlbiB0ZXh0LWdyYXktNDAwIGhvdmVyOnRleHQtZ3JheS0zMDAgY3Vyc29yLXBvaW50ZXIgaXRlbXMtY2VudGVyIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiZmxleCBpdGVtcy1jZW50ZXIgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLXdoaXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJqYXZhc2NyaXB0OnZvaWQoMCkiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiBpY29uLXRhYmxlciBpY29uLXRhYmxlci1zZXR0aW5ncyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDI0IDI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2Utd2lkdGgiOiAiMS41IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogImN1cnJlbnRDb2xvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAibm9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb2tlLWxpbmVjYXAiOiAicm91bmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1saW5lam9pbiI6ICJyb3VuZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHN0cm9rZTogIm5vbmUiLCBkOiAiTTAgMGgyNHYyNEgweiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTEwLjMyNSA0LjMxN2MuNDI2LTEuNzU2IDIuOTI0LTEuNzU2IDMuMzUgMGExLjcyNCAxLjcyNCAwIDAgMCAyLjU3MyAxLjA2NmMxLjU0My0uOTQgMy4zMS44MjYgMi4zNyAyLjM3YTEuNzI0IDEuNzI0IDAgMCAwIDEuMDY1IDIuNTcyYzEuNzU2LjQyNiAxLjc1NiAyLjkyNCAwIDMuMzVhMS43MjQgMS43MjQgMCAwIDAgLTEuMDY2IDIuNTczYy45NCAxLjU0My0uODI2IDMuMzEtMi4zNyAyLjM3YTEuNzI0IDEuNzI0IDAgMCAwIC0yLjU3MiAxLjA2NWMtLjQyNiAxLjc1Ni0yLjkyNCAxLjc1Ni0zLjM1IDBhMS43MjQgMS43MjQgMCAwIDAgLTIuNTczIC0xLjA2NmMtMS41NDMuOTQtMy4zMS0uODI2LTIuMzctMi4zN2ExLjcyNCAxLjcyNCAwIDAgMCAtMS4wNjUgLTIuNTcyYy0xLjc1Ni0uNDI2LTEuNzU2LTIuOTI0IDAtMy4zNWExLjcyNCAxLjcyNCAwIDAgMCAxLjA2NiAtMi41NzNjLS45NC0xLjU0My44MjYtMy4zMSAyLjM3LTIuMzcuOTk2LjYwOCAyLjI5Ni4wNyAyLjU3Mi0xLjA2NXoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImNpcmNsZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGN4OiAiMTIiLCBjeTogIjEyIiwgcjogIjMiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zbSBtbC0yIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2V0dGluZ3MiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oNikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl9tKDcpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX20oOCkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoLTE2IHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL3R1ay1jZG4uczMuYW1hem9uYXdzLmNvbS9jYW4tdXBsb2FkZXIvbGlnaHRfd2l0aF9pY29uc19hdF9ib3R0b20tc3ZnMS5zdmciLAogICAgICAgICAgYWx0OiAiTG9nbyIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgganVzdGlmeS1jZW50ZXIgbXQtNDggbWItNCB3LWZ1bGwiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyZWxhdGl2ZSIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTMwMCBhYnNvbHV0ZSBtbC00IGluc2V0LTAgbS1hdXRvIHctNCBoLTQiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdHVrLWNkbi5zMy5hbWF6b25hd3MuY29tL2Nhbi11cGxvYWRlci9saWdodF93aXRoX2ljb25zX2F0X2JvdHRvbS1zdmcyLnN2ZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICJTZWFyY2giCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJiZy1ncmF5LTcwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0xIGZvY3VzOnJpbmctZ3JheS0xMDAgcm91bmRlZCB3LWZ1bGwgdGV4dC1zbSB0ZXh0LWdyYXktMzAwIHBsYWNlaG9sZGVyLWdyYXktNDAwIGJnLWdyYXktMTAwIHBsLTEwIHB5LTIiLAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIlNlYXJjaCIgfQogICAgICAgIH0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB4LTggYm9yZGVyLXQgYm9yZGVyLWdyYXktNzAwIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJ1bCIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gYmctZ3JheS04MDAiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogImN1cnNvci1wb2ludGVyIHRleHQtd2hpdGUgcHQtNSBwYi0zIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiByb3VuZGVkIGZvY3VzOnJpbmctZ3JheS0zMDAiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWwiOiAic2hvdyBub3RpZmljYXRpb25zIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3R1ay1jZG4uczMuYW1hem9uYXdzLmNvbS9jYW4tdXBsb2FkZXIvbGlnaHRfd2l0aF9pY29uc19hdF9ib3R0b20tc3ZnMy5zdmciLAogICAgICAgICAgICAgICAgICAgIGFsdDogIm5vdGlmaWNhdGlvbnMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJjdXJzb3ItcG9pbnRlciB0ZXh0LXdoaXRlIHB0LTUgcGItMyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgcm91bmRlZCBmb2N1czpyaW5nLWdyYXktMzAwIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsIjogIm9wZW4gY2hhdHMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdHVrLWNkbi5zMy5hbWF6b25hd3MuY29tL2Nhbi11cGxvYWRlci9saWdodF93aXRoX2ljb25zX2F0X2JvdHRvbS1zdmc0LnN2ZyIsCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiY2hhdCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogImN1cnNvci1wb2ludGVyIHRleHQtd2hpdGUgcHQtNSBwYi0zIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiByb3VuZGVkIGZvY3VzOnJpbmctZ3JheS0zMDAiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWwiOiAib3BlbiBzZXR0aW5ncyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly90dWstY2RuLnMzLmFtYXpvbmF3cy5jb20vY2FuLXVwbG9hZGVyL2xpZ2h0X3dpdGhfaWNvbnNfYXRfYm90dG9tLXN2ZzUuc3ZnIiwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJzZXR0aW5ncyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogImN1cnNvci1wb2ludGVyIHRleHQtd2hpdGUgcHQtNSBwYi0zIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiByb3VuZGVkIGZvY3VzOnJpbmctZ3JheS0zMDAiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWwiOiAib3BlbiBsb2dzIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3R1ay1jZG4uczMuYW1hem9uYXdzLmNvbS9jYW4tdXBsb2FkZXIvbGlnaHRfd2l0aF9pY29uc19hdF9ib3R0b20tc3ZnNi5zdmciLAogICAgICAgICAgICAgICAgICAgIGFsdDogImRyYXdlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImJ1dHRvbiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJoLTEwIHctMTAgYmctZ3JheS04MDAgYWJzb2x1dGUgcmlnaHQtMCBtdC0xNiAtbXItMTAgZmxleCBpdGVtcy1jZW50ZXIgc2hhZG93IHJvdW5kZWQtdHIgcm91bmRlZC1iciBqdXN0aWZ5LWNlbnRlciBjdXJzb3ItcG9pbnRlciBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctb2Zmc2V0LTIgcm91bmRlZCBmb2N1czpyaW5nLWdyYXktODAwIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgImFyaWEtbGFiZWwiOiAidG9nZ2xlIHNpZGViYXIiLAogICAgICAgICAgaWQ6ICJvcGVuU2lkZUJhciIsCiAgICAgICAgICBvbmNsaWNrOiAic2lkZWJhckhhbmRsZXIodHJ1ZSkiCiAgICAgICAgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly90dWstY2RuLnMzLmFtYXpvbmF3cy5jb20vY2FuLXVwbG9hZGVyL2xpZ2h0X3dpdGhfaWNvbnNfYXRfYm90dG9tLXN2Zzcuc3ZnIiwKICAgICAgICAgICAgYWx0OiAidG9nZ2xlciIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiYnV0dG9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImhpZGRlbiBoLTEwIHctMTAgYmctZ3JheS04MDAgYWJzb2x1dGUgcmlnaHQtMCBtdC0xNiAtbXItMTAgZmxleCBpdGVtcy1jZW50ZXIgc2hhZG93IHJvdW5kZWQtdHIgcm91bmRlZC1iciBqdXN0aWZ5LWNlbnRlciBjdXJzb3ItcG9pbnRlciB0ZXh0LXdoaXRlIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgImFyaWEtbGFiZWwiOiAiQ2xvc2Ugc2lkZWJhciIsCiAgICAgICAgICBpZDogImNsb3NlU2lkZUJhciIsCiAgICAgICAgICBvbmNsaWNrOiAic2lkZWJhckhhbmRsZXIoZmFsc2UpIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vdHVrLWNkbi5zMy5hbWF6b25hd3MuY29tL2Nhbi11cGxvYWRlci9saWdodF93aXRoX2ljb25zX2F0X2JvdHRvbS1zdmc4LnN2ZyIsCiAgICAgICAgICAgIGFsdDogImNyb3NzIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoLTE2IHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL3R1ay1jZG4uczMuYW1hem9uYXdzLmNvbS9jYW4tdXBsb2FkZXIvbGlnaHRfd2l0aF9pY29uc19hdF9ib3R0b20tc3ZnMS5zdmciLAogICAgICAgICAgYWx0OiAiTG9nbyIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgganVzdGlmeS1jZW50ZXIgbXQtNDggbWItNCB3LWZ1bGwiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyZWxhdGl2ZSIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTMwMCBhYnNvbHV0ZSBtbC00IGluc2V0LTAgbS1hdXRvIHctNCBoLTQiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdHVrLWNkbi5zMy5hbWF6b25hd3MuY29tL2Nhbi11cGxvYWRlci9saWdodF93aXRoX2ljb25zX2F0X2JvdHRvbS1zdmcyLnN2ZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICJTZWFyY2giCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJiZy1ncmF5LTcwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0xIGZvY3VzOnJpbmctZ3JheS0xMDAgIHJvdW5kZWQgdy1mdWxsIHRleHQtc20gdGV4dC1ncmF5LTMwMCBwbGFjZWhvbGRlci1ncmF5LTQwMCBiZy1ncmF5LTEwMCBwbC0xMCBweS0yIiwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgcGxhY2Vob2xkZXI6ICJTZWFyY2giIH0KICAgICAgICB9KQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJweC04IGJvcmRlci10IGJvcmRlci1ncmF5LTcwMCIgfSwgWwogICAgICBfYygKICAgICAgICAidWwiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGJnLWdyYXktODAwIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJjdXJzb3ItcG9pbnRlciB0ZXh0LXdoaXRlIHB0LTUgcGItMyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgcm91bmRlZCBmb2N1czpyaW5nLWdyYXktMzAwIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsIjogInNob3cgbm90aWZpY2F0aW9ucyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly90dWstY2RuLnMzLmFtYXpvbmF3cy5jb20vY2FuLXVwbG9hZGVyL2xpZ2h0X3dpdGhfaWNvbnNfYXRfYm90dG9tLXN2ZzMuc3ZnIiwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJub3RpZmljYXRpb25zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiY3Vyc29yLXBvaW50ZXIgdGV4dC13aGl0ZSBwdC01IHBiLTMiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIHJvdW5kZWQgZm9jdXM6cmluZy1ncmF5LTMwMCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1sYWJlbCI6ICJvcGVuIGNoYXRzIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3R1ay1jZG4uczMuYW1hem9uYXdzLmNvbS9jYW4tdXBsb2FkZXIvbGlnaHRfd2l0aF9pY29uc19hdF9ib3R0b20tc3ZnNC5zdmciLAogICAgICAgICAgICAgICAgICAgIGFsdDogImNoYXQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJjdXJzb3ItcG9pbnRlciB0ZXh0LXdoaXRlIHB0LTUgcGItMyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgcm91bmRlZCBmb2N1czpyaW5nLWdyYXktMzAwIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsIjogIm9wZW4gc2V0dGluZ3MiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdHVrLWNkbi5zMy5hbWF6b25hd3MuY29tL2Nhbi11cGxvYWRlci9saWdodF93aXRoX2ljb25zX2F0X2JvdHRvbS1zdmc1LnN2ZyIsCiAgICAgICAgICAgICAgICAgICAgYWx0OiAic2V0dGluZ3MiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJjdXJzb3ItcG9pbnRlciB0ZXh0LXdoaXRlIHB0LTUgcGItMyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgcm91bmRlZCBmb2N1czpyaW5nLWdyYXktMzAwIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsIjogIm9wZW4gbG9ncyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly90dWstY2RuLnMzLmFtYXpvbmF3cy5jb20vY2FuLXVwbG9hZGVyL2xpZ2h0X3dpdGhfaWNvbnNfYXRfYm90dG9tLXN2ZzYuc3ZnIiwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJkcmF3ZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIG14LWF1dG8gcHktMTAgaC02NCBtZDp3LTQvNSB3LTExLzEyIHB4LTYiIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJ3LWZ1bGwgaC1mdWxsIHJvdW5kZWQgYm9yZGVyLWRhc2hlZCBib3JkZXItMiBib3JkZXItZ3JheS0zMDAiCiAgICAgICAgfSkKICAgICAgXQogICAgKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}